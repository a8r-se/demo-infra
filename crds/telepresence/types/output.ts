// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace getambassador {
    export namespace v1alpha2 {
        /**
         * The Intercept Specification defines Telepresence intercepts.
         */
        export interface InterceptSpecificationSpec {
            /**
             * Connection properties to use when Telepresence connects to the cluster.
             */
            connection?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecConnection;
            handlers?: any[];
            /**
             * An name to give to the specification.
             */
            name?: string;
            prerequisites?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecPrerequisites[];
            /**
             * Remote workloads that are intercepted, keyed by workload name.
             */
            workloads?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloads[];
        }

        /**
         * Connection properties to use when Telepresence connects to the cluster.
         */
        export interface InterceptSpecificationSpecConnection {
            /**
             * Additional comma separated list of CIDR to proxy.
             */
            alsoProxy?: string[];
            /**
             * Username to impersonate for the operation.
             */
            as?: string;
            /**
             * Groups to impersonate for the operation.
             */
            asGroups?: string[];
            /**
             * UID to impersonate for the operation.
             */
            asUID?: string;
            /**
             * The name of the kubeconfig cluster to use
             */
            cluster?: string;
            /**
             * The name of the kubeconfig context to use
             */
            context?: string;
            /**
             * The namespace where the traffic manager is to be found.
             */
            managerNamespace?: string;
            /**
             * The namespaces that Telepresence will be concerned with
             */
            mappedNamespaces?: string[];
            /**
             * Comma separated list of CIDR to never proxy.
             */
            neverProxy?: string[];
            /**
             * The name of the kubeconfig user to use
             */
            user?: string;
        }

        /**
         * Things to create prior to starting any intercepts, and delete once the intercept is complete.
         */
        export interface InterceptSpecificationSpecPrerequisites {
            /**
             * A handler to create things prior to starting any intercepts.
             */
            create: string;
            /**
             * A handler to delete the created things once all intercepts have ended.
             */
            delete?: string;
        }

        /**
         * An intercepted workload (Deployment, ReplicaSet or StatefulSet), keyed by name.
         */
        export interface InterceptSpecificationSpecWorkloads {
            /**
             * The services and/or ports to intercept
             */
            intercepts?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsIntercepts[];
            name: string;
            /**
             * The namespace for the workload and services
             */
            namespace?: string;
        }

        export interface InterceptSpecificationSpecWorkloadsIntercepts {
            /**
             * If set to false, disables this intercept. Default is true
             */
            enabled?: boolean;
            /**
             * If true, then intercept all tcp/udp traffic. Mutually exclusive with headers and pathXxx properties
             */
            global?: boolean;
            /**
             * The intercept handler that handles this intercept.
             */
            handler: string;
            /**
             * Headers that will filter the intercept. If omitted or empty, and if global isn't explicitly set to true, an auto header will be generated
             */
            headers?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsInterceptsHeaders[];
            /**
             * The local IP address that will receive the intercepted traffic.
             */
            localAddress?: string;
            /**
             * The local port that will receive the intercepted traffic.
             */
            localPort?: number;
            /**
             * Metadata that will be returned by the Telepresence API server
             */
            meta?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsInterceptsMeta[];
            /**
             * The local directory or drive where the remote volumes are mounted
             */
            mountPoint?: string;
            /**
             * Path filter for the intercept.
             */
            pathEqual?: string;
            /**
             * Path prefix filter for the intercept. Defaults to "/"
             */
            pathPrefix?: string;
            /**
             * Path regular expression filter for the intercept.
             */
            pathRegexp?: string;
            /**
             * Path suffix filter for the intercept.
             */
            pathSuffix?: string;
            /**
             * Use plaintext format when communicating with the interceptor process on the local workstation. Only meaningful when intercepting workloads annotated with "getambassador.io/inject-originating-tls-secret" to prevent that TLS is used during intercepts
             */
            plaintext?: boolean;
            /**
             * The port that will be intercepted.
             */
            port?: number | string;
            previewURL?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsInterceptsPreviewurl;
            /**
             * Name of service to intercept
             */
            service?: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsHeaders {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsMeta {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurl {
            /**
             * Display banner on preview page (default true)
             */
            banner?: boolean;
            /**
             * Enable preview URL (default true)
             */
            enable?: boolean;
            /**
             * Additional headers in key1=value1,key2=value2 pairs injected in every preview page request
             */
            extraHeaders?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsInterceptsPreviewurlExtraheaders[];
            ingress?: outputs.getambassador.v1alpha2.InterceptSpecificationSpecWorkloadsInterceptsPreviewurlIngress;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurlExtraheaders {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurlIngress {
            /**
             * The ingress hostname.
             */
            host?: string;
            /**
             * The ingress L5 Hostname. Defaults to ingressHost
             */
            l5Host?: string;
            /**
             * The ingress port.
             */
            port?: number;
            /**
             * Determines if TLS is used.
             */
            tls?: boolean;
        }

    }

    export namespace v1alpha3 {
        /**
         * The Intercept Specification defines Telepresence intercepts.
         */
        export interface InterceptSpecificationSpec {
            /**
             * Connection properties to use when Telepresence connects to the cluster.
             */
            connection?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecConnection;
            handlers?: any[];
            /**
             * An name to give to the specification.
             */
            name?: string;
            prerequisites?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecPrerequisites[];
            /**
             * Remote workloads that are intercepted, keyed by workload name.
             */
            workloads?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloads[];
        }

        /**
         * Connection properties to use when Telepresence connects to the cluster.
         */
        export interface InterceptSpecificationSpecConnection {
            /**
             * Additional comma separated list of CIDR to proxy.
             */
            alsoProxy?: string[];
            /**
             * Username to impersonate for the operation.
             */
            as?: string;
            /**
             * Groups to impersonate for the operation.
             */
            asGroups?: string[];
            /**
             * UID to impersonate for the operation.
             */
            asUID?: string;
            /**
             * The name of the kubeconfig cluster to use
             */
            cluster?: string;
            /**
             * The name of the kubeconfig context to use
             */
            context?: string;
            /**
             * The namespace where the traffic manager is to be found.
             */
            managerNamespace?: string;
            /**
             * The namespaces that Telepresence will be concerned with
             */
            mappedNamespaces?: string[];
            /**
             * Comma separated list of CIDR to never proxy.
             */
            neverProxy?: string[];
            /**
             * The name of the kubeconfig user to use
             */
            user?: string;
        }

        /**
         * Things to create prior to starting any intercepts, and delete once the intercept is complete.
         */
        export interface InterceptSpecificationSpecPrerequisites {
            /**
             * A handler to create things prior to starting any intercepts.
             */
            create: string;
            /**
             * A handler to delete the created things once all intercepts have ended.
             */
            delete?: string;
        }

        /**
         * An intercepted workload (Deployment, ReplicaSet or StatefulSet), keyed by name.
         */
        export interface InterceptSpecificationSpecWorkloads {
            /**
             * The services and/or ports to intercept
             */
            intercepts?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsIntercepts[];
            name: string;
            /**
             * The namespace for the workload and services
             */
            namespace?: string;
        }

        export interface InterceptSpecificationSpecWorkloadsIntercepts {
            /**
             * If set to false, disables this intercept. Default is true
             */
            enabled?: boolean;
            /**
             * If true, then intercept all tcp/udp traffic. Mutually exclusive with headers and pathXxx properties
             */
            global?: boolean;
            /**
             * The intercept handler that handles this intercept.
             */
            handler: string;
            /**
             * Headers that will filter the intercept. If omitted or empty, and if global isn't explicitly set to true, an auto header will be generated
             */
            headers?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsInterceptsHeaders[];
            /**
             * The local IP address that will receive the intercepted traffic.
             */
            localAddress?: string;
            /**
             * The local port that will receive the intercepted traffic.
             */
            localPort?: number;
            /**
             * Metadata that will be returned by the Telepresence API server
             */
            meta?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsInterceptsMeta[];
            /**
             * The local directory or drive where the remote volumes are mounted
             */
            mountPoint?: string;
            /**
             * Optional name of the intercept.
             */
            name?: string;
            /**
             * Path filter for the intercept.
             */
            pathEqual?: string;
            /**
             * Path prefix filter for the intercept. Defaults to "/"
             */
            pathPrefix?: string;
            /**
             * Path regular expression filter for the intercept.
             */
            pathRegexp?: string;
            /**
             * Path suffix filter for the intercept.
             */
            pathSuffix?: string;
            /**
             * Use plaintext format when communicating with the interceptor process on the local workstation. Only meaningful when intercepting workloads annotated with "getambassador.io/inject-originating-tls-secret" to prevent that TLS is used during intercepts
             */
            plaintext?: boolean;
            /**
             * The port that will be intercepted.
             */
            port?: number | string;
            previewURL?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsInterceptsPreviewurl;
            /**
             * Name of service to intercept
             */
            service?: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsHeaders {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsMeta {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurl {
            /**
             * Display banner on preview page (default true)
             */
            banner?: boolean;
            /**
             * Enable preview URL (default true)
             */
            enable?: boolean;
            /**
             * Additional headers in key1=value1,key2=value2 pairs injected in every preview page request
             */
            extraHeaders?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsInterceptsPreviewurlExtraheaders[];
            ingress?: outputs.getambassador.v1alpha3.InterceptSpecificationSpecWorkloadsInterceptsPreviewurlIngress;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurlExtraheaders {
            name: string;
            value: string;
        }

        export interface InterceptSpecificationSpecWorkloadsInterceptsPreviewurlIngress {
            /**
             * The ingress hostname.
             */
            host?: string;
            /**
             * The ingress L5 Hostname. Defaults to ingressHost
             */
            l5Host?: string;
            /**
             * The ingress port.
             */
            port?: number;
            /**
             * Determines if TLS is used.
             */
            tls?: boolean;
        }

    }
}
