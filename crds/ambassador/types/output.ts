// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace gateway {
    export namespace v1alpha1 {
        /**
         * Defines the desired user configuration for a WebApplicationFirewallPolicy that contains a set of rules that configure which WebApplicationFirewallPolicy to use for requests.
         */
        export interface WebApplicationFirewallPolicySpec {
            /**
             * Optional field that can be used to limit which instances of Edge Stack can make use of this resource
             */
            ambassadorSelector?: outputs.gateway.v1alpha1.WebApplicationFirewallPolicySpecAmbassadorselector;
            /**
             * Set of matching rules that are checked against incoming request to determine which set of WebApplicationFirewalls to apply. If no matches are found then the request is allowed through to the upstream service.
             */
            rules: outputs.gateway.v1alpha1.WebApplicationFirewallPolicySpecRules[];
        }

        /**
         * Optional field that can be used to limit which instances of Edge Stack can make use of this resource
         */
        export interface WebApplicationFirewallPolicySpecAmbassadorselector {
            /**
             * limits this resource to be used only by instances of Edge Stack that have an AMBASSADOR_ID matching one of the ids in the list
             */
            ambassadorIds?: string[];
        }

        /**
         * Defines criteria for matching requests to a WebApplicationFirewall
         */
        export interface WebApplicationFirewallPolicySpecRules {
            /**
             * A "glob-string" that matches on the `:authority` header of the incoming request. If not set it will match on all incoming requests.
             */
            host?: string;
            /**
             * Checks if exact or regular expression matches a value in a request Header to determine if the WebApplicationFirewall is executed or not.
             */
            ifRequestHeader?: outputs.gateway.v1alpha1.WebApplicationFirewallPolicySpecRulesIfrequestheader;
            /**
             * Provides a way to configure how requests are handled when a request matches the rule but there is a configuration or runtime error. When this field is not configured, the default behavior is to allow the request.
             */
            onError?: outputs.gateway.v1alpha1.WebApplicationFirewallPolicySpecRulesOnerror;
            /**
             * A "glob-string" that matches on the request path. If not provided then it will match on all incoming requests.
             */
            path?: string;
            /**
             * Allows forcing a precedence ordering on the rules. By default the rules are evaluated in the order they are in the `WebApplicationFirewallPolicy.spec.rules` field. However, multiple WebApplicationFirewallPolicys can be applied to a cluster. To ensure that a specific ordering is enforced then using a precedence on rules ensures a specific ordering.
             */
            precedence?: number;
            /**
             * References a WebApplicationFirewall that will be applied to the incoming request.
             */
            wafRef: outputs.gateway.v1alpha1.WebApplicationFirewallPolicySpecRulesWafref;
        }
        /**
         * webApplicationFirewallPolicySpecRulesProvideDefaults sets the appropriate defaults for WebApplicationFirewallPolicySpecRules
         */
        export function webApplicationFirewallPolicySpecRulesProvideDefaults(val: WebApplicationFirewallPolicySpecRules): WebApplicationFirewallPolicySpecRules {
            return {
                ...val,
                host: (val.host) ?? "*",
                ifRequestHeader: (val.ifRequestHeader ? outputs.gateway.v1alpha1.webApplicationFirewallPolicySpecRulesIfrequestheaderProvideDefaults(val.ifRequestHeader) : undefined),
                path: (val.path) ?? "*",
            };
        }

        /**
         * Checks if exact or regular expression matches a value in a request Header to determine if the WebApplicationFirewall is executed or not.
         */
        export interface WebApplicationFirewallPolicySpecRulesIfrequestheader {
            /**
             * Name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  Valid values include: 
             *  * "Authorization" * "Set-Cookie" 
             *  Invalid values include: 
             *  - ":method" - ":" is an invalid character. This means that HTTP/2 pseudo headers are not currently supported by this type. - "/invalid" - "/" is an invalid character
             */
            name: string;
            /**
             * Allows the match criteria to be negated or flipped. 
             *  For example, you can have a regex that checks for any non-empty string which would indicate would translate to if header exists on request then match on it. With negate turned on this would translate to match on any request that doesn't have a header.
             */
            negate?: boolean;
            /**
             * Specifies the semantics of how HTTP header values should be compared. Valid HeaderMatchType values are: 
             *  * "Exact" * "RegularExpression"
             */
            type?: string;
            /**
             * Value of HTTP Header to be matched. 
             *  if type is RegularExpression then this must be a valid regex with length being at least 1
             */
            value?: string;
        }
        /**
         * webApplicationFirewallPolicySpecRulesIfrequestheaderProvideDefaults sets the appropriate defaults for WebApplicationFirewallPolicySpecRulesIfrequestheader
         */
        export function webApplicationFirewallPolicySpecRulesIfrequestheaderProvideDefaults(val: WebApplicationFirewallPolicySpecRulesIfrequestheader): WebApplicationFirewallPolicySpecRulesIfrequestheader {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Provides a way to configure how requests are handled when a request matches the rule but there is a configuration or runtime error. When this field is not configured, the default behavior is to allow the request.
         */
        export interface WebApplicationFirewallPolicySpecRulesOnerror {
            /**
             * statusCode sets the HTTP status code to use when denying the request.
             */
            statusCode?: number;
        }

        /**
         * References a WebApplicationFirewall that will be applied to the incoming request.
         */
        export interface WebApplicationFirewallPolicySpecRulesWafref {
            /**
             * Name of the WebApplicationFirewall
             */
            name: string;
            /**
             * Namespace that the WebApplicationFirewall resides in. It must be a RFC 1123 label. 
             *  This validation is based off of the corresponding Kubernetes validation: https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/util/validation/validation.go#L187 
             *  This is used for Namespace name validation here: https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/api/validation/generic.go#L63 
             *  Valid values include: 
             *  * "example" 
             *  Invalid values include: 
             *  * "example.com" - "." is an invalid character
             */
            namespace?: string;
        }

        /**
         * Provides a list of conditions that describe the current state of the WebApplicationFirewallPolicy for fast feedback on whether the resource is configured correctly or not.
         */
        export interface WebApplicationFirewallPolicyStatus {
            /**
             * Describes the current state of the WebApplicationFirewallPolicy Known condition types are: 
             *  * "Accepted" * "Ready" * "Rejected" - if any rules have an error then the whole WebApplicationFirewallPolicy will be rejected.
             */
            conditions?: outputs.gateway.v1alpha1.WebApplicationFirewallPolicyStatusConditions[];
            ruleStatuses?: outputs.gateway.v1alpha1.WebApplicationFirewallPolicyStatusRulestatuses[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface WebApplicationFirewallPolicyStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * Describes the status of a Rule within a WebApplicationFirewallPolicy.
         */
        export interface WebApplicationFirewallPolicyStatusRulestatuses {
            /**
             * conditions describe the current state of this Rule.
             */
            conditions: outputs.gateway.v1alpha1.WebApplicationFirewallPolicyStatusRulestatusesConditions[];
            /**
             * host of the rule with the error.
             */
            host: string;
            /**
             * Provides the zero-based index in the list of Rules to help identify the rule with an error
             */
            index: number;
            /**
             * path of the rule with the error.
             */
            path: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface WebApplicationFirewallPolicyStatusRulestatusesConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * Defines the desired user configuration for the WebApplicationFirewall.
         */
        export interface WebApplicationFirewallSpec {
            /**
             * Optional field that can be used to limit which instances of Edge Stack can make use of this resource
             */
            ambassadorSelector?: outputs.gateway.v1alpha1.WebApplicationFirewallSpecAmbassadorselector;
            firewallRules: outputs.gateway.v1alpha1.WebApplicationFirewallSpecFirewallrules[];
            /**
             * Provides a way to configure additional logging in the Edge Stack pods for the WebApplicationFirewall. This is in addition to the logging config that is available via the firewall configuration files. The following logs will always be output to the container logs when enabled.
             */
            logging?: outputs.gateway.v1alpha1.WebApplicationFirewallSpecLogging;
        }

        /**
         * Optional field that can be used to limit which instances of Edge Stack can make use of this resource
         */
        export interface WebApplicationFirewallSpecAmbassadorselector {
            /**
             * limits this resource to be used only by instances of Edge Stack that have an AMBASSADOR_ID matching one of the ids in the list
             */
            ambassadorIds?: string[];
        }

        /**
         * Contains configuration for where to load rules for a specific WebApplicationFirewall.
         */
        export interface WebApplicationFirewallSpecFirewallrules {
            /**
             * Contains a name and namespace reference to a Kubernetes ConfigMap and a key to pull data from
             */
            configMapRef?: outputs.gateway.v1alpha1.WebApplicationFirewallSpecFirewallrulesConfigmapref;
            /**
             * Provides a path to a file or directory on the Edge Stack pod to load rules configuration from
             */
            file?: string;
            /**
             * Configures downloading firewall rules from the internet via an HTTP request
             */
            http?: outputs.gateway.v1alpha1.WebApplicationFirewallSpecFirewallrulesHttp;
            /**
             * Indicates the method that we will use to load rules configuration for the WebApplicationFirewall
             */
            sourceType: string;
        }

        /**
         * Contains a name and namespace reference to a Kubernetes ConfigMap and a key to pull data from
         */
        export interface WebApplicationFirewallSpecFirewallrulesConfigmapref {
            /**
             * Key for the field in the configmap that should be use
             */
            key: string;
            /**
             * Name that identifies the ConfigMap
             */
            name: string;
            /**
             * Namespace refers to a Kubernetes namespace that the ConfigMap resides. It must be a RFC 1123 label. When no Namespace is provided, it defaults to the namespace of the parent object. 
             *  This validation is based off of the corresponding Kubernetes validation: https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/util/validation/validation.go#L187 
             *  This is used for Namespace name validation here: https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/api/validation/generic.go#L63 
             *  Valid values include: 
             *  * "example" 
             *  Invalid values include: 
             *  * "example.com" - "." is an invalid character
             */
            namespace?: string;
        }

        /**
         * Configures downloading firewall rules from the internet via an HTTP request
         */
        export interface WebApplicationFirewallSpecFirewallrulesHttp {
            /**
             * Provides the address to download the firewall rules from.
             */
            url?: string;
        }

        /**
         * Provides a way to configure additional logging in the Edge Stack pods for the WebApplicationFirewall. This is in addition to the logging config that is available via the firewall configuration files. The following logs will always be output to the container logs when enabled.
         */
        export interface WebApplicationFirewallSpecLogging {
            /**
             * Controls logging behavior when the WebApplicationFirewall interrupts a request.
             */
            onInterrupt: outputs.gateway.v1alpha1.WebApplicationFirewallSpecLoggingOninterrupt;
        }

        /**
         * Controls logging behavior when the WebApplicationFirewall interrupts a request.
         */
        export interface WebApplicationFirewallSpecLoggingOninterrupt {
            /**
             * Configures whether the container should output logs. These additional logs are not enabled unless this is set to `true`
             */
            enabled: boolean;
        }

        /**
         * Provides a list of conditions that describe the current state of the WebApplicationFirewall for fast feedback on whether the resource is configured correctly or not.
         */
        export interface WebApplicationFirewallStatus {
            /**
             * Describes the current state of the WebApplicationFirewall Known condition types are: 
             *  * "Accepted" * "Ready" * "Rejected" - if any rules have an error then the whole WebApplicationFirewall will be rejected.
             */
            conditions?: outputs.gateway.v1alpha1.WebApplicationFirewallStatusConditions[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface WebApplicationFirewallStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

    }
}

export namespace getambassador {
    export namespace v1 {
    }

    export namespace v1beta1 {
    }

    export namespace v1beta2 {
    }

    export namespace v2 {
        /**
         * HostStatus defines the observed state of Host
         */
        export interface HostStatus {
            errorBackoff?: string;
            /**
             * errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
             */
            errorReason?: string;
            errorTimestamp?: string;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phaseCompleted?: string;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phasePending?: string;
            state?: string;
            tlsCertificateSource?: string;
        }

        /**
         * MappingStatus defines the observed state of Mapping
         */
        export interface MappingStatus {
            reason?: string;
            state?: string;
        }

    }

    export namespace v3alpha1 {
        /**
         * AuthServiceSpec defines the desired state of AuthService
         */
        export interface AuthServiceSpec {
            add_auth_headers?: {[key: string]: string};
            add_linkerd_headers?: boolean;
            /**
             * TODO(lukeshu): In v3alpha2, drop allow_request_body in favor of include_body. allow_request_body has been deprecated for a long time.
             */
            allow_request_body?: boolean;
            allowed_authorization_headers?: string[];
            allowed_request_headers?: string[];
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            /**
             * TODO(lukeshu): In v3alpha2, consider renameing `auth_service` to just `service`, for consistency with the other resource types.
             */
            auth_service: string;
            circuit_breakers?: outputs.getambassador.v3alpha1.AuthServiceSpecCircuit_breakers[];
            failure_mode_allow?: boolean;
            include_body?: outputs.getambassador.v3alpha1.AuthServiceSpecInclude_body;
            path_prefix?: string;
            proto?: string;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: string;
            stats_name?: string;
            /**
             * TODO(lukeshu): In v3alpha2, consider getting rid of this struct type in favor of just using an int (i.e. `statusOnError: 500` instead of the current `statusOnError: { code: 500 }`).
             */
            status_on_error?: outputs.getambassador.v3alpha1.AuthServiceSpecStatus_on_error;
            timeout_ms?: number;
            tls?: string;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: outputs.getambassador.v3alpha1.AuthServiceSpecV2explicittls;
        }

        export interface AuthServiceSpecCircuit_breakers {
            max_connections?: number;
            max_pending_requests?: number;
            max_requests?: number;
            max_retries?: number;
            priority?: string;
        }

        export interface AuthServiceSpecInclude_body {
            allow_partial: boolean;
            /**
             * These aren't pointer types because they are required.
             */
            max_bytes: number;
        }

        /**
         * TODO(lukeshu): In v3alpha2, consider getting rid of this struct type in favor of just using an int (i.e. `statusOnError: 500` instead of the current `statusOnError: { code: 500 }`).
         */
        export interface AuthServiceSpecStatus_on_error {
            code?: number;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface AuthServiceSpecV2explicittls {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: string;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *  | Value        | Representation                        | Meaning of representation          | |--------------+---------------------------------------+------------------------------------| | ""           | omit the field                        | defer to service (no TLSContext)   | | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   | | "string"     | store an empty string in the field    | defer to service (no TLSContext)   | | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   | | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: string;
        }

        /**
         * ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
         */
        export interface ConsulResolverSpec {
            address?: string;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            datacenter?: string;
        }

        /**
         * DevPortalSpec defines the desired state of DevPortal
         */
        export interface DevPortalSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            /**
             * Content specifies where the content shown in the DevPortal come from
             */
            content?: outputs.getambassador.v3alpha1.DevPortalSpecContent;
            /**
             * Default must be true when this is the default DevPortal
             */
            default?: boolean;
            /**
             * Docs is a static docs definition
             */
            docs?: outputs.getambassador.v3alpha1.DevPortalSpecDocs[];
            /**
             * Describes how to display "services" in the DevPortal. Default namespace.name
             */
            naming_scheme?: string;
            /**
             * Configures this DevPortal to use server definitions from the openAPI doc instead of rewriting them based on the url used for the connection.
             */
            preserve_servers?: boolean;
            /**
             * DevPortalSearchSpec allows configuration over search functionality for the DevPortal
             */
            search?: outputs.getambassador.v3alpha1.DevPortalSpecSearch;
            /**
             * Selector is used for choosing what is shown in the DevPortal
             */
            selector?: outputs.getambassador.v3alpha1.DevPortalSpecSelector;
        }

        /**
         * Content specifies where the content shown in the DevPortal come from
         */
        export interface DevPortalSpecContent {
            branch?: string;
            dir?: string;
            url?: string;
        }

        /**
         * DevPortalDocsSpec is a static documentation definition: instead of using a Selector for finding documentation for services, users can provide a static list of <service>:<URL> tuples. These services will be shown in the Dev Portal with the documentation obtained from this URL.
         */
        export interface DevPortalSpecDocs {
            /**
             * Service is the service being documented
             */
            service?: string;
            /**
             * Timeout specifies the amount of time devportal will wait for the downstream service to report an openapi spec back
             */
            timeout_ms?: number;
            /**
             * URL is the URL used for obtaining docs
             */
            url?: string;
        }

        /**
         * DevPortalSearchSpec allows configuration over search functionality for the DevPortal
         */
        export interface DevPortalSpecSearch {
            enabled?: boolean;
            /**
             * Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
             */
            type?: string;
        }

        /**
         * Selector is used for choosing what is shown in the DevPortal
         */
        export interface DevPortalSpecSelector {
            /**
             * MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
             */
            matchLabels?: {[key: string]: string};
            /**
             * MatchNamespaces is a list of namespaces that will be included in this DevPortal.
             */
            matchNamespaces?: string[];
        }

        /**
         * HostSpec defines the desired state of Host
         */
        export interface HostSpec {
            /**
             * Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
             */
            acmeProvider?: outputs.getambassador.v3alpha1.HostSpecAcmeprovider;
            /**
             * Common to all Ambassador objects (and optional).
             */
            ambassador_id?: string[];
            /**
             * Hostname by which the Ambassador can be reached.
             */
            hostname?: string;
            /**
             * Selector for Mappings we'll associate with this Host. At the moment, Selector and MappingSelector are synonyms, but that will change soon.
             */
            mappingSelector?: outputs.getambassador.v3alpha1.HostSpecMappingselector;
            /**
             * Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
             */
            previewUrl?: outputs.getambassador.v3alpha1.HostSpecPreviewurl;
            /**
             * Request policy definition.
             */
            requestPolicy?: outputs.getambassador.v3alpha1.HostSpecRequestpolicy;
            /**
             * DEPRECATED: Selector by which we can find further configuration. Use MappingSelector instead. 
             *  TODO(lukeshu): In v3alpha2, figure out how to get rid of HostSpec.DeprecatedSelector.
             */
            selector?: outputs.getambassador.v3alpha1.HostSpecSelector;
            /**
             * TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
             */
            tls?: outputs.getambassador.v3alpha1.HostSpecTls;
            /**
             * Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`. 
             *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
             */
            tlsContext?: outputs.getambassador.v3alpha1.HostSpecTlscontext;
            /**
             * Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
             */
            tlsSecret?: outputs.getambassador.v3alpha1.HostSpecTlssecret;
        }

        /**
         * Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
         */
        export interface HostSpecAcmeprovider {
            /**
             * Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
             */
            authority?: string;
            email?: string;
            /**
             * Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account. 
             *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
             */
            privateKeySecret?: outputs.getambassador.v3alpha1.HostSpecAcmeproviderPrivatekeysecret;
            /**
             * This is normally set automatically
             */
            registration?: string;
        }

        /**
         * Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account. 
         *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
         */
        export interface HostSpecAcmeproviderPrivatekeysecret {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Selector for Mappings we'll associate with this Host. At the moment, Selector and MappingSelector are synonyms, but that will change soon.
         */
        export interface HostSpecMappingselector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.getambassador.v3alpha1.HostSpecMappingselectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface HostSpecMappingselectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
         */
        export interface HostSpecPreviewurl {
            /**
             * Is the Preview URL feature enabled?
             */
            enabled?: boolean;
            /**
             * What type of Preview URL is allowed?
             */
            type?: string;
        }

        /**
         * Request policy definition.
         */
        export interface HostSpecRequestpolicy {
            insecure?: outputs.getambassador.v3alpha1.HostSpecRequestpolicyInsecure;
        }

        export interface HostSpecRequestpolicyInsecure {
            action?: string;
            additionalPort?: number;
        }

        /**
         * DEPRECATED: Selector by which we can find further configuration. Use MappingSelector instead. 
         *  TODO(lukeshu): In v3alpha2, figure out how to get rid of HostSpec.DeprecatedSelector.
         */
        export interface HostSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.getambassador.v3alpha1.HostSpecSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface HostSpecSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
         */
        export interface HostSpecTls {
            alpn_protocols?: string;
            ca_secret?: string;
            cacert_chain_file?: string;
            cert_chain_file?: string;
            cert_required?: boolean;
            cipher_suites?: string[];
            crl_secret?: string;
            ecdh_curves?: string[];
            max_tls_version?: string;
            min_tls_version?: string;
            private_key_file?: string;
            redirect_cleartext_from?: number;
            sni?: string;
        }

        /**
         * Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`. 
         *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
         */
        export interface HostSpecTlscontext {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
         */
        export interface HostSpecTlssecret {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name?: string;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace?: string;
        }

        /**
         * HostStatus defines the observed state of Host
         */
        export interface HostStatus {
            errorBackoff?: string;
            /**
             * errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
             */
            errorReason?: string;
            errorTimestamp?: string;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phaseCompleted?: string;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phasePending?: string;
            state?: string;
            tlsCertificateSource?: string;
        }

        /**
         * KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
         */
        export interface KubernetesEndpointResolverSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
        }

        /**
         * KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
         */
        export interface KubernetesServiceResolverSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
        }

        /**
         * ListenerSpec defines the desired state of this Port
         */
        export interface ListenerSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            /**
             * HostBinding allows restricting which Hosts will be used for this Listener.
             */
            hostBinding: outputs.getambassador.v3alpha1.ListenerSpecHostbinding;
            /**
             * L7Depth specifies how many layer 7 load balancers are between us and the edge of the network.
             */
            l7Depth?: number;
            /**
             * Port is the network port. Only one Listener can use a given port.
             */
            port: number;
            /**
             * Protocol is a shorthand for certain predefined stacks. Exactly one of Protocol or ProtocolStack must be supplied.
             */
            protocol?: string;
            /**
             * ProtocolStack explicitly specifies the protocol stack to set up. Exactly one of Protocol or ProtocolStack must be supplied.
             */
            protocolStack?: string[];
            /**
             * SecurityModel specifies how to determine whether connections to this port are secure or insecure.
             */
            securityModel: string;
            /**
             * StatsPrefix specifies the prefix for statistics sent by Envoy about this Listener. The default depends on the protocol: "ingress-http", "ingress-https", "ingress-tls-$port", or "ingress-$port".
             */
            statsPrefix?: string;
        }

        /**
         * HostBinding allows restricting which Hosts will be used for this Listener.
         */
        export interface ListenerSpecHostbinding {
            /**
             * NamespaceBindingType defines we we specify which namespaces to look for Hosts in.
             */
            namespace?: outputs.getambassador.v3alpha1.ListenerSpecHostbindingNamespace;
            /**
             * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: outputs.getambassador.v3alpha1.ListenerSpecHostbindingSelector;
        }

        /**
         * NamespaceBindingType defines we we specify which namespaces to look for Hosts in.
         */
        export interface ListenerSpecHostbindingNamespace {
            /**
             * NamespaceFromType defines how we evaluate a NamespaceBindingType.
             */
            from?: string;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ListenerSpecHostbindingSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.getambassador.v3alpha1.ListenerSpecHostbindingSelectorMatchexpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ListenerSpecHostbindingSelectorMatchexpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LogServiceSpec defines the desired state of LogService
         */
        export interface LogServiceSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            driver?: string;
            driver_config?: outputs.getambassador.v3alpha1.LogServiceSpecDriver_config;
            flush_interval_byte_size?: number;
            flush_interval_time?: number;
            /**
             * TODO(lukeshu): In v3alpha2, drop this LogService.spec.grpc.  Due to sloppy implementation it is required to be present, and required to be 'true'.  It is silly to have a required field with only one valid value, we should just remove the thing.
             */
            grpc?: boolean;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: string;
            service?: string;
            stats_name?: string;
        }

        export interface LogServiceSpecDriver_config {
            additional_log_headers?: outputs.getambassador.v3alpha1.LogServiceSpecDriver_configAdditional_log_headers[];
        }

        export interface LogServiceSpecDriver_configAdditional_log_headers {
            during_request?: boolean;
            during_response?: boolean;
            during_trailer?: boolean;
            header_name?: string;
        }

        /**
         * MappingSpec defines the desired state of Mapping
         */
        export interface MappingSpec {
            add_linkerd_headers?: boolean;
            add_request_headers?: {[key: string]: outputs.getambassador.v3alpha1.MappingSpecAdd_request_headers};
            add_response_headers?: {[key: string]: outputs.getambassador.v3alpha1.MappingSpecAdd_response_headers};
            /**
             * A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings. 
             *  [1]: https://tools.ietf.org/html/rfc7230#section-6.7 
             *  For example, if your upstream service supports WebSockets, you would write 
             *  allow_upgrade: - websocket 
             *  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write 
             *  allow_upgrade: - spdy/3.1
             */
            allow_upgrade?: string[];
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            auth_context_extensions?: {[key: string]: string};
            auto_host_rewrite?: boolean;
            bypass_auth?: boolean;
            /**
             * If true, bypasses any `error_response_overrides` set on the Ambassador module.
             */
            bypass_error_response_overrides?: boolean;
            case_sensitive?: boolean;
            circuit_breakers?: outputs.getambassador.v3alpha1.MappingSpecCircuit_breakers[];
            cluster_idle_timeout_ms?: number;
            cluster_max_connection_lifetime_ms?: number;
            cluster_tag?: string;
            connect_timeout_ms?: number;
            cors?: outputs.getambassador.v3alpha1.MappingSpecCors;
            dns_type?: string;
            /**
             * DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
             */
            docs?: outputs.getambassador.v3alpha1.MappingSpecDocs;
            enable_ipv4?: boolean;
            enable_ipv6?: boolean;
            envoy_override?: {[key: string]: any};
            /**
             * Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
             */
            error_response_overrides?: outputs.getambassador.v3alpha1.MappingSpecError_response_overrides[];
            grpc?: boolean;
            headers?: {[key: string]: string};
            health_checks?: outputs.getambassador.v3alpha1.MappingSpecHealth_checks[];
            /**
             * Exact match for the hostname of a request if HostRegex is false; regex match for the hostname if HostRegex is true. 
             *  Host specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Host will not associate with a Host that doesn't have a matching Hostname. 
             *  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used. 
             *  DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead. 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.host and MappingSpec.host_regex in favor of a MappingSpec.deprecated_hostname_regex.
             */
            host?: string;
            host_redirect?: boolean;
            /**
             * DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead. 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.host and MappingSpec.host_regex in favor of a MappingSpec.deprecated_hostname_regex.
             */
            host_regex?: boolean;
            host_rewrite?: string;
            /**
             * Hostname is a DNS glob specifying the hosts to which this Mapping applies. 
             *  Hostname specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Hostname will not associate with a Host that doesn't have a matching Hostname. 
             *  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used.
             */
            hostname?: string;
            idle_timeout_ms?: number;
            keepalive?: outputs.getambassador.v3alpha1.MappingSpecKeepalive;
            /**
             * A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
             */
            labels?: {[key: string]: {[key: string]: outputs.getambassador.v3alpha1.MappingSpecLabels[]}[]};
            load_balancer?: outputs.getambassador.v3alpha1.MappingSpecLoad_balancer;
            method?: string;
            method_regex?: boolean;
            modules?: {[key: string]: any}[];
            outlier_detection?: string;
            /**
             * Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            path_redirect?: string;
            precedence?: number;
            prefix: string;
            prefix_exact?: boolean;
            /**
             * Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            prefix_redirect?: string;
            prefix_regex?: boolean;
            priority?: string;
            query_parameters?: {[key: string]: string};
            /**
             * The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
             */
            redirect_response_code?: number;
            regex_headers?: {[key: string]: string};
            regex_query_parameters?: {[key: string]: string};
            /**
             * Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            regex_redirect?: outputs.getambassador.v3alpha1.MappingSpecRegex_redirect;
            regex_rewrite?: outputs.getambassador.v3alpha1.MappingSpecRegex_rewrite;
            remove_request_headers?: string[];
            remove_response_headers?: string[];
            resolver?: string;
            respect_dns_ttl?: boolean;
            retry_policy?: outputs.getambassador.v3alpha1.MappingSpecRetry_policy;
            rewrite?: string;
            service: string;
            shadow?: boolean;
            stats_name?: string;
            /**
             * The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
             */
            timeout_ms?: number;
            tls?: string;
            /**
             * use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]` 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.DeprecatedUseWebsocket.
             */
            use_websocket?: boolean;
            v2BoolHeaders?: string[];
            v2BoolQueryParameters?: string[];
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: outputs.getambassador.v3alpha1.MappingSpecV2explicittls;
            weight?: number;
        }

        export interface MappingSpecAdd_request_headers {
            append?: boolean;
            v2Representation?: string;
            value?: string;
        }

        export interface MappingSpecAdd_response_headers {
            append?: boolean;
            v2Representation?: string;
            value?: string;
        }

        export interface MappingSpecCircuit_breakers {
            max_connections?: number;
            max_pending_requests?: number;
            max_requests?: number;
            max_retries?: number;
            priority?: string;
        }

        export interface MappingSpecCors {
            credentials?: boolean;
            exposed_headers?: string[];
            headers?: string[];
            max_age?: string;
            methods?: string[];
            origins?: string[];
            v2CommaSeparatedOrigins?: boolean;
        }

        /**
         * DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
         */
        export interface MappingSpecDocs {
            display_name?: string;
            ignored?: boolean;
            path?: string;
            timeout_ms?: number;
            url?: string;
        }

        /**
         * A response rewrite for an HTTP error response
         */
        export interface MappingSpecError_response_overrides {
            /**
             * The new response body
             */
            body: outputs.getambassador.v3alpha1.MappingSpecError_response_overridesBody;
            /**
             * The status code to match on -- not a pointer because it's required.
             */
            on_status_code: number;
        }

        /**
         * The new response body
         */
        export interface MappingSpecError_response_overridesBody {
            /**
             * The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
             */
            content_type?: string;
            /**
             * A JSON response with content-type: application/json. The values can contain format text like in text_format.
             */
            json_format?: {[key: string]: string};
            /**
             * A format string representing a text response body. Content-Type can be set using the `content_type` field below.
             */
            text_format?: string;
            /**
             * A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
             */
            text_format_source?: outputs.getambassador.v3alpha1.MappingSpecError_response_overridesBodyText_format_source;
        }

        /**
         * A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
         */
        export interface MappingSpecError_response_overridesBodyText_format_source {
            /**
             * The name of a file on the Ambassador pod that contains a format text string.
             */
            filename?: string;
        }

        /**
         * HealthCheck specifies settings for performing active health checking on upstreams
         */
        export interface MappingSpecHealth_checks {
            /**
             * Configuration for where the healthcheck request should be made to
             */
            health_check: outputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_check;
            /**
             * Number of expected responses for the upstream to be considered healthy. Defaults to 1.
             */
            healthy_threshold?: number;
            /**
             * Interval between health checks. Defaults to every 5 seconds.
             */
            interval?: string;
            /**
             * Timeout for connecting to the health checking endpoint. Defaults to 3 seconds.
             */
            timeout?: string;
            /**
             * Number of non-expected responses for the upstream to be considered unhealthy. A single 503 will mark the upstream as unhealthy regardless of the threshold. Defaults to 2.
             */
            unhealthy_threshold?: number;
        }

        /**
         * Configuration for where the healthcheck request should be made to
         */
        export interface MappingSpecHealth_checksHealth_check {
            /**
             * HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
             */
            grpc?: outputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkGrpc;
            /**
             * HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
             */
            http?: outputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttp;
        }

        /**
         * HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
         */
        export interface MappingSpecHealth_checksHealth_checkGrpc {
            /**
             * The value of the :authority header in the gRPC health check request. If left empty the upstream name will be used.
             */
            authority?: string;
            /**
             * The upstream name parameter which will be sent to gRPC service in the health check message
             */
            upstream_name: string;
        }

        /**
         * HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
         */
        export interface MappingSpecHealth_checksHealth_checkHttp {
            add_request_headers?: {[key: string]: outputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttpAdd_request_headers};
            expected_statuses?: outputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttpExpected_statuses[];
            hostname?: string;
            path: string;
            remove_request_headers?: string[];
        }

        export interface MappingSpecHealth_checksHealth_checkHttpAdd_request_headers {
            append?: boolean;
            v2Representation?: string;
            value?: string;
        }

        /**
         * A range of response statuses from Start to End inclusive
         */
        export interface MappingSpecHealth_checksHealth_checkHttpExpected_statuses {
            /**
             * End of the statuses to include. Must be between 100 and 599 (inclusive)
             */
            max: number;
            /**
             * Start of the statuses to include. Must be between 100 and 599 (inclusive)
             */
            min: number;
        }

        export interface MappingSpecKeepalive {
            idle_time?: number;
            interval?: number;
            probes?: number;
        }

        /**
         * A MappingLabelSpecifier (finally!) defines a single label. 
         *  This mimics envoy/config/route/v3/route_components.proto:RateLimit:Action:action_specifier.
         */
        export interface MappingSpecLabels {
            /**
             * Sets the label "destination_cluster=«Envoy destination cluster name»".
             */
            destination_cluster?: outputs.getambassador.v3alpha1.MappingSpecLabelsDestination_cluster;
            /**
             * Sets the label "«key»=«value»" (where by default «key» is "generic_key").
             */
            generic_key?: outputs.getambassador.v3alpha1.MappingSpecLabelsGeneric_key;
            /**
             * Sets the label "remote_address=«IP address of the client»".
             */
            remote_address?: outputs.getambassador.v3alpha1.MappingSpecLabelsRemote_address;
            /**
             * If the «header_name» header is set, then set the label "«key»=«Value of the «header_name» header»"; otherwise skip applying this label group.
             */
            request_headers?: outputs.getambassador.v3alpha1.MappingSpecLabelsRequest_headers;
            /**
             * Sets the label "source_cluster=«Envoy source cluster name»".
             */
            source_cluster?: outputs.getambassador.v3alpha1.MappingSpecLabelsSource_cluster;
        }

        /**
         * Sets the label "destination_cluster=«Envoy destination cluster name»".
         */
        export interface MappingSpecLabelsDestination_cluster {
            key: string;
        }

        /**
         * Sets the label "«key»=«value»" (where by default «key» is "generic_key").
         */
        export interface MappingSpecLabelsGeneric_key {
            /**
             * The default is "generic_key".
             */
            key?: string;
            v2Shorthand?: boolean;
            value: string;
        }

        /**
         * Sets the label "remote_address=«IP address of the client»".
         */
        export interface MappingSpecLabelsRemote_address {
            key: string;
        }

        /**
         * If the «header_name» header is set, then set the label "«key»=«Value of the «header_name» header»"; otherwise skip applying this label group.
         */
        export interface MappingSpecLabelsRequest_headers {
            header_name: string;
            key: string;
            omit_if_not_present?: boolean;
        }

        /**
         * Sets the label "source_cluster=«Envoy source cluster name»".
         */
        export interface MappingSpecLabelsSource_cluster {
            key: string;
        }

        export interface MappingSpecLoad_balancer {
            cookie?: outputs.getambassador.v3alpha1.MappingSpecLoad_balancerCookie;
            header?: string;
            policy: string;
            source_ip?: boolean;
        }

        export interface MappingSpecLoad_balancerCookie {
            name: string;
            path?: string;
            ttl?: string;
        }

        /**
         * Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
         */
        export interface MappingSpecRegex_redirect {
            pattern?: string;
            substitution?: string;
        }

        export interface MappingSpecRegex_rewrite {
            pattern?: string;
            substitution?: string;
        }

        export interface MappingSpecRetry_policy {
            num_retries?: number;
            per_try_timeout?: string;
            retry_on?: string;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface MappingSpecV2explicittls {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: string;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *  | Value        | Representation                        | Meaning of representation          | |--------------+---------------------------------------+------------------------------------| | ""           | omit the field                        | defer to service (no TLSContext)   | | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   | | "string"     | store an empty string in the field    | defer to service (no TLSContext)   | | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   | | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: string;
        }

        /**
         * MappingStatus defines the observed state of Mapping
         */
        export interface MappingStatus {
            reason?: string;
            state?: string;
        }

        /**
         * TODO(lukeshu): In v3alpha2, get rid of unnecessary nesting and move `ModuleSpec.config.*` to `ModuleSpec.*`.
         */
        export interface ModuleSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            /**
             * TODO(lukeshu): In v3alpha2, change the default from `diagnostics.enabled=true` to `diagnostics.enabled=false`.  This needs conversion support in apiext.  See the related comment in irambassador.py. 
             *  TODO(lukeshu): Structurally type ModuleSpec.Config.
             */
            config: {[key: string]: any};
        }

        /**
         * RateLimitServiceSpec defines the desired state of RateLimitService
         */
        export interface RateLimitServiceSpec {
            /**
             * Common to all Ambassador objects.
             */
            ambassador_id?: string[];
            domain?: string;
            /**
             * FailureModeDeny when set to true, envoy will deny traffic if it is unable to communicate with the rate limit service.
             */
            failure_mode_deny?: boolean;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: string;
            service: string;
            stats_name?: string;
            timeout_ms?: number;
            tls?: string;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: outputs.getambassador.v3alpha1.RateLimitServiceSpecV2explicittls;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface RateLimitServiceSpecV2explicittls {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: string;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *  | Value        | Representation                        | Meaning of representation          | |--------------+---------------------------------------+------------------------------------| | ""           | omit the field                        | defer to service (no TLSContext)   | | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   | | "string"     | store an empty string in the field    | defer to service (no TLSContext)   | | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   | | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: string;
        }

        /**
         * TCPMappingSpec defines the desired state of TCPMapping
         */
        export interface TCPMappingSpec {
            address?: string;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            circuit_breakers?: outputs.getambassador.v3alpha1.TCPMappingSpecCircuit_breakers[];
            cluster_tag?: string;
            enable_ipv4?: boolean;
            enable_ipv6?: boolean;
            host?: string;
            /**
             * FIXME(lukeshu): Surely this should be an 'int'?
             */
            idle_timeout_ms?: string;
            /**
             * Port isn't a pointer because it's required.
             */
            port: number;
            resolver?: string;
            service: string;
            stats_name?: string;
            tls?: string;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: outputs.getambassador.v3alpha1.TCPMappingSpecV2explicittls;
            weight?: number;
        }

        export interface TCPMappingSpecCircuit_breakers {
            max_connections?: number;
            max_pending_requests?: number;
            max_requests?: number;
            max_retries?: number;
            priority?: string;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface TCPMappingSpecV2explicittls {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: string;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *  | Value        | Representation                        | Meaning of representation          | |--------------+---------------------------------------+------------------------------------| | ""           | omit the field                        | defer to service (no TLSContext)   | | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   | | "string"     | store an empty string in the field    | defer to service (no TLSContext)   | | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   | | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: string;
        }

        /**
         * TLSContextSpec defines the desired state of TLSContext
         */
        export interface TLSContextSpec {
            alpn_protocols?: string;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            ca_secret?: string;
            cacert_chain_file?: string;
            cert_chain_file?: string;
            cert_required?: boolean;
            cipher_suites?: string[];
            crl_secret?: string;
            ecdh_curves?: string[];
            hosts?: string[];
            max_tls_version?: string;
            min_tls_version?: string;
            private_key_file?: string;
            redirect_cleartext_from?: number;
            secret?: string;
            secret_namespacing?: boolean;
            sni?: string;
        }

        /**
         * TracingServiceSpec defines the desired state of TracingService
         */
        export interface TracingServiceSpec {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  ambassador_id: - "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: string[];
            config?: outputs.getambassador.v3alpha1.TracingServiceSpecConfig;
            custom_tags?: outputs.getambassador.v3alpha1.TracingServiceSpecCustom_tags[];
            driver: string;
            sampling?: outputs.getambassador.v3alpha1.TracingServiceSpecSampling;
            service: string;
            stats_name?: string;
            /**
             * Deprecated: tag_headers is deprecated. Use custom_tags instead. `tag_headers: ["header"]` can be defined as `custom_tags: [{"request_header": {"name": "header"}}]`.
             */
            tag_headers?: string[];
        }

        export interface TracingServiceSpecConfig {
            access_token_file?: string;
            collector_cluster?: string;
            collector_endpoint?: string;
            collector_endpoint_version?: string;
            collector_hostname?: string;
            propagation_modes?: string[];
            service_name?: string;
            shared_span_context?: boolean;
            trace_id_128bit?: boolean;
        }

        /**
         * TracingCustomTag provides a data structure for capturing envoy's `type.tracing.v3.CustomTag`
         */
        export interface TracingServiceSpecCustom_tags {
            /**
             * Environment explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            environment?: outputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsEnvironment;
            /**
             * Literal explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            literal?: outputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsLiteral;
            /**
             * Header explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            request_header?: outputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsRequest_header;
            tag: string;
        }

        /**
         * Environment explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsEnvironment {
            default_value?: string;
            name: string;
        }

        /**
         * Literal explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsLiteral {
            value: string;
        }

        /**
         * Header explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsRequest_header {
            default_value?: string;
            name: string;
        }

        export interface TracingServiceSpecSampling {
            client?: number;
            overall?: number;
            random?: number;
        }

    }
}
